# -*- coding: utf-8 -*-
"""ModeloShap.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19bZMqhzNBSrMOSBqeZvq64X_OTWnLqF6
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('data.csv')
df.head()

columnas_a_revisar = ["Facultad","Carrera","Res","Sexo", "Rel", "F.Nac.","Pais","Estado","Tipo","N° Mat","N° AC","N° CP", "N° Cr","N° Cr.NA","Desc. Becas", "Donativos", "Deuda Actual","TPT", "target"]

for col in columnas_a_revisar:
    if col in df.columns:
        print(f"Valores únicos en '{col}':")
        print(df[col].unique())
        print("-" * 50)

df['Edad_Rango'] = pd.cut(df['F.Nac.'], bins=[17, 20, 25, 30, 35, 60],
                          labels=[1, 2, 3, 4, 5])

mapa_facultad = {facultad: i for i, facultad in enumerate(df['Facultad'].unique())}
df['Facultad'] = df['Facultad'].map(mapa_facultad)

mapa_carrera = {carrera: i for i, carrera in enumerate(df['Carrera'].unique())}
df['Carrera'] = df['Carrera'].map(mapa_carrera)

df['Sexo'] = df['Sexo'].map({'M': 0, 'F': 1})

mapa_pais = {pais: i for i, pais in enumerate(df['Pais'].unique())}
df['Pais'] = df['Pais'].map(mapa_pais)

df['Estado'].fillna('Extranjero', inplace=True)
mapa_estado = {estado: i for i, estado in enumerate(df['Estado'].unique())}
df['Estado'] = df['Estado'].map(mapa_estado)

mapa_tipo = {tipo: i for i, tipo in enumerate(df['Tipo'].unique())}
df['Tipo'] = df['Tipo'].map(mapa_tipo)

df['Desc. Becas'].fillna('none', inplace=True)
mapa_beca = {'none': 0, 'low': 1, 'medium': 2}
df['Desc. Becas'] = df['Desc. Becas'].map(mapa_beca)

df['Donativos'].fillna('none', inplace=True)
mapa_donativos = {'none': 0, 'low': 1, 'medium': 2, 'high': 3}
df['Donativos'] = df['Donativos'].map(mapa_donativos)

df['Deuda Actual'].fillna('none', inplace=True)
mapa_deuda = {'none': 0, 'low': 1, 'medium': 2, 'high': 3}
df['Deuda Actual'] = df['Deuda Actual'].map(mapa_deuda)

if 'Origen' in df.columns:
    df.drop(columns=['Origen'], inplace=True)

mapa_tpt = {
    '1.Favorable': 1,
    '2.Limitado': 2,
    '3.Moderado': 3,
    '4.Riesgo': 4,
    '5.Invalidado': 5
}

df['TPT'] = df['TPT'].map(mapa_tpt)

df['N_Mat_Rango'] = pd.cut(df['N° Mat'], bins=[0, 4, 8, 12, 20],
                           labels=[1, 2, 3, 4])

df['N_AC_Rango'] = pd.cut(df['N° AC'], bins=[-1, 2, 5, 8, 11],
                          labels=[1, 2, 3, 4])

df['N_NA_Rango'] = pd.cut(df['N° NA'], bins=[-1, 0, 2, 4, 7],
                          labels=[1, 2, 3, 4]).cat.add_categories(0).fillna(0)

df['N_Cr_Rango'] = pd.cut(df['N° Cr'], bins=[0, 20, 40, 60, 100],
                          labels=[1, 2, 3, 4])

df['N_Cr_NA_Rango'] = pd.cut(df['N° Cr.NA'], bins=[-1, 0, 10, 20, 60],
                             labels=[1, 2, 3, 4])

features_a_usar = [
    'Facultad', 'Carrera', 'Sexo', 'Pais', 'Estado', 'Tipo',
    'Desc. Becas', 'Donativos', 'Deuda Actual', 'TPT',
    'Edad_Rango', 'N_Mat_Rango', 'N_AC_Rango', 'N_NA_Rango',
    'N_Cr_Rango', 'N_Cr_NA_Rango','N° CP','N° BA'
]


X = df[features_a_usar]
y = df['target']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier

modelo = RandomForestClassifier()

modelo.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, classification_report

y_pred = modelo.predict(X_test)

precision = accuracy_score(y_test, y_pred)
print(f'Precisión del modelo: {precision:.2f}')

print(classification_report(y_test, y_pred))


import shap
import numpy as np
np.bool = bool
explainer = shap.Explainer(modelo)
shap_values = explainer.shap_values(X_test)
print(shap_values[0].shape)
print(shap_values[1].shape)
print(X_test.shape)

print(X_test.dtypes)

print(type(explainer))

shap_values[0]

shap.summary_plot(shap_values, X_test)

print(X_test.dtypes)

shap.summary_plot(shap_values[0], X_test)

shap.summary_plot(shap_values[1], X_test)

shap.dependence_plot("N_NA_Rango", shap_values[0], X_test,interaction_index="Edad_Rango")

shap.plots.force(explainer.expected_value[0], shap_values[0][0,:], X_test.iloc[0, :], matplotlib = True)

shap.plots.force(explainer.expected_value[1], shap_values[1][6, :], X_test.iloc[6, :],matplotlib = True)

shap.decision_plot(explainer.expected_value[1], shap_values[1], X_test.columns)

shap.decision_plot(explainer.expected_value[0], shap_values[0], X_test.columns)

